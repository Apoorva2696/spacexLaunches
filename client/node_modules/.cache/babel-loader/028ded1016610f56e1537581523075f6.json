{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from \"../actions/types\";\nimport { setAlert } from '../actions/alerts';\nimport axios from 'axios';\nimport setAuthToken from \"../utils/setAuthTokens\"; //load User\n\nexport const loadUser = ({}) => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/apoorva.srivastava/Desktop/devConnector/client/src/actions/auth.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAlert","axios","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg"],"mappings":"AAAA,SACIA,gBADJ,EACsBC,aADtB,EACqCC,WADrC,EACkDC,UADlD,QAEO,kBAFP;AAGA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,wBAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAAC,EAAD,KAAQ,MAAMC,QAAN,IAAkB;AAC9C,MAAGC,YAAY,CAACC,KAAhB,EAAuB;AACnBJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACH;;AAED,MAAG;AAEC,UAAMC,GAAG,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,WAAV,CAAlB;AAEAJ,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEX,WADD;AAELY,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GARD,CAQE,OAAMC,GAAN,EAAW;AACTR,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEV;AADD,KAAD,CAAR;AAGH;AACJ,CAlBM,C,CAoBP;;AACA,OAAO,MAAMc,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA;AAAhB,CAAD,KAAgC,MAAMZ,QAAN,IAAkB;AAEtE,QAAMa,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;;AAEA,MAAG;AAEC,UAAMT,GAAG,GAAG,MAAMN,KAAK,CAACqB,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,CAAlB;AAEAb,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEb,gBADD;AAELc,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GARD,CAQE,OAAMC,GAAN,EAAW;AACT,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AAEA,QAAIA,MAAJ,EAAa;AACTA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAUtB,QAAQ,CAACJ,QAAQ,CAAC0B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAjC;AACH;;AAEDvB,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEZ;AADD,KAAD,CAAR;AAGH;AAEJ,CA9BM","sourcesContent":["import {\n    REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR \n} from \"../actions/types\";\nimport { setAlert } from '../actions/alerts';\nimport axios from 'axios';\nimport setAuthToken from \"../utils/setAuthTokens\";\n\n//load User\nexport const loadUser = ({}) => async dispatch => {\n    if(localStorage.token) {\n        setAuthToken(localStorage.token);\n    }\n\n    try{\n\n        const res = await axios.get('/api/auth');\n\n        dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        });\n    } catch(err) {\n        dispatch({\n            type: AUTH_ERROR\n        })\n    }\n};\n\n// Register user\nexport const register = ({ name , email, password }) => async dispatch => {\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ name, email, password });\n\n    try{\n\n        const res = await axios.post('/api/users', body, config);\n\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        })\n    } catch(err) {\n        const errors = err.response.data.errors;\n\n        if( errors ) {\n            errors.forEach((error)=> dispatch(setAlert(error.msg, 'danger')));\n        }\n\n        dispatch({\n            type: REGISTER_FAIL\n        });\n    }\n\n};\n"]},"metadata":{},"sourceType":"module"}